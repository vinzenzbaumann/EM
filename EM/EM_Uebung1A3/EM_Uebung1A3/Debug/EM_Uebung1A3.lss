
EM_Uebung1A3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000207  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000122  00000000  00000000  00000409  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017f  00000000  00000000  0000052b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b3  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a1  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Set>:

uint8_t Set(){
	
	uint8_t copy = 0;
	
	if(PIND&(1<<PIND5)){					//Schalterabfrage Schalter 1
  80:	89 b1       	in	r24, 0x09	; 9
  82:	85 fb       	bst	r24, 5
  84:	88 27       	eor	r24, r24
  86:	80 f9       	bld	r24, 0
		copy+=1;
	} 
	if(PIND&(1<<PIND6)){					//Schalterabfrage Schalter 2
  88:	4e 99       	sbic	0x09, 6	; 9
		copy+=2;
  8a:	8e 5f       	subi	r24, 0xFE	; 254
	}
	if(PIND&(1<<PIND7)){					//Schalterabfrage Schalter 3
  8c:	4f 99       	sbic	0x09, 7	; 9
		copy+=4;
  8e:	8c 5f       	subi	r24, 0xFC	; 252
	}
return copy;
}
  90:	08 95       	ret

00000092 <actualize>:

 uint8_t actualize(uint8_t counter, uint8_t actualizer){
	 
	 actualizer &= ~0b00001110;//einzeln löschen besser
  92:	61 7f       	andi	r22, 0xF1	; 241
	 
	 if(counter & 1){
  94:	80 fd       	sbrc	r24, 0
		 actualizer |= (1<<PORTD1);
  96:	62 60       	ori	r22, 0x02	; 2
	 }
	 if(counter & 2){
  98:	81 fd       	sbrc	r24, 1
		  actualizer |= (1<<PORTD2);
  9a:	64 60       	ori	r22, 0x04	; 4
	 }
	 if(counter & 4){
  9c:	82 fd       	sbrc	r24, 2
		 actualizer |= (1<<PORTD3);
  9e:	68 60       	ori	r22, 0x08	; 8
	 }
	 return actualizer;
}
  a0:	86 2f       	mov	r24, r22
  a2:	08 95       	ret

000000a4 <main>:

 
int main(void)
{
	// eingänge
	DDRD|=(1<<PORTD1)|(1<<PORTD3)|(1<<PORTD2);// setzt DDRD an der stelle dddx auf output
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	8e 60       	ori	r24, 0x0E	; 14
  a8:	8a b9       	out	0x0a, r24	; 10
	
	
	
	// Pullups
	PORTB|= (1<<PORTB0)|(1<<PORTB1);
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	85 b9       	out	0x05, r24	; 5
	PORTD|= (1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	80 6e       	ori	r24, 0xE0	; 224
  b4:	8b b9       	out	0x0b, r24	; 11
	
	bool stop = false;
	uint8_t counter = 0;
	uint8_t PINB0_prev=0, PINB1_prev=0, PINB0_curr=0, PINB1_curr=0;
  b6:	f1 2c       	mov	r15, r1
  b8:	00 e0       	ldi	r16, 0x00	; 0
	// Pullups
	PORTB|= (1<<PORTB0)|(1<<PORTB1);
	PORTD|= (1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
	
	bool stop = false;
	uint8_t counter = 0;
  ba:	c0 e0       	ldi	r28, 0x00	; 0
	
	// Pullups
	PORTB|= (1<<PORTB0)|(1<<PORTB1);
	PORTD|= (1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
	
	bool stop = false;
  bc:	d0 e0       	ldi	r29, 0x00	; 0
		
		if (stop){
			
		}
		else {
			if((counter%10)==0) {
  be:	0f 2e       	mov	r0, r31
  c0:	fd ec       	ldi	r31, 0xCD	; 205
  c2:	ef 2e       	mov	r14, r31
  c4:	f0 2d       	mov	r31, r0
			PORTD=actualize(counter/10,PORTD);
			}
			if(counter == 79){
				counter = 0;
  c6:	d1 2c       	mov	r13, r1
		}
		
		//tasterabfrage A3
		
		if(PINB&(1<<PINB0)){					//Taster A3 gedrückt (High Pegel)
			PINB0_curr = 1;
  c8:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t counter = 0;
	uint8_t PINB0_prev=0, PINB1_prev=0, PINB0_curr=0, PINB1_curr=0;
	
	while(1){
		
		if (stop){
  ca:	d1 11       	cpse	r29, r1
  cc:	1c c0       	rjmp	.+56     	; 0x106 <main+0x62>
			
		}
		else {
			if((counter%10)==0) {
  ce:	ce 9d       	mul	r28, r14
  d0:	81 2d       	mov	r24, r1
  d2:	11 24       	eor	r1, r1
  d4:	86 95       	lsr	r24
  d6:	86 95       	lsr	r24
  d8:	86 95       	lsr	r24
  da:	88 0f       	add	r24, r24
  dc:	98 2f       	mov	r25, r24
  de:	99 0f       	add	r25, r25
  e0:	99 0f       	add	r25, r25
  e2:	89 0f       	add	r24, r25
  e4:	c8 13       	cpse	r28, r24
  e6:	0a c0       	rjmp	.+20     	; 0xfc <main+0x58>
			PORTD=actualize(counter/10,PORTD);
  e8:	6b b1       	in	r22, 0x0b	; 11
  ea:	ce 9d       	mul	r28, r14
  ec:	81 2d       	mov	r24, r1
  ee:	11 24       	eor	r1, r1
  f0:	86 95       	lsr	r24
  f2:	86 95       	lsr	r24
  f4:	86 95       	lsr	r24
  f6:	0e 94 49 00 	call	0x92	; 0x92 <actualize>
  fa:	8b b9       	out	0x0b, r24	; 11
			}
			if(counter == 79){
  fc:	cf 34       	cpi	r28, 0x4F	; 79
  fe:	11 f0       	breq	.+4      	; 0x104 <main+0x60>
				counter = 0;
			}
			else{
			counter++;
 100:	cf 5f       	subi	r28, 0xFF	; 255
 102:	01 c0       	rjmp	.+2      	; 0x106 <main+0x62>
		else {
			if((counter%10)==0) {
			PORTD=actualize(counter/10,PORTD);
			}
			if(counter == 79){
				counter = 0;
 104:	cd 2d       	mov	r28, r13
			}
		}
		
		//tasterabfrage A3
		
		if(PINB&(1<<PINB0)){					//Taster A3 gedrückt (High Pegel)
 106:	18 99       	sbic	0x03, 0	; 3
 108:	03 c0       	rjmp	.+6      	; 0x110 <main+0x6c>
			PINB0_curr = 1;
		}
		 else {
			PINB0_curr = 0;
			if (PINB0_prev!=PINB0_curr){		//falls Taster nicht mehr gedrückt und vorheriger input = gedrückt
 10a:	01 11       	cpse	r16, r1
 10c:	03 c0       	rjmp	.+6      	; 0x114 <main+0x70>
 10e:	04 c0       	rjmp	.+8      	; 0x118 <main+0x74>
		}
		
		//tasterabfrage A3
		
		if(PINB&(1<<PINB0)){					//Taster A3 gedrückt (High Pegel)
			PINB0_curr = 1;
 110:	01 2f       	mov	r16, r17
 112:	02 c0       	rjmp	.+4      	; 0x118 <main+0x74>
		}
		 else {
			PINB0_curr = 0;
 114:	0d 2d       	mov	r16, r13
			if (PINB0_prev!=PINB0_curr){		//falls Taster nicht mehr gedrückt und vorheriger input = gedrückt
				stop = true;
 116:	d1 2f       	mov	r29, r17
			}	
		}
		
		
		
		if(PINB&(1<<PINB1)){					//Taster A4 gedrückt (High Pegel)
 118:	19 99       	sbic	0x03, 1	; 3
 11a:	0c c0       	rjmp	.+24     	; 0x134 <main+0x90>
			PINB1_curr = 1;
		} else {
			PINB1_curr = 0;
			if (PINB1_prev!=PINB1_curr){		//falls Taster nicht mehr gedrückt und vorheriger input = gedrückt
 11c:	ff 20       	and	r15, r15
 11e:	59 f0       	breq	.+22     	; 0x136 <main+0x92>
				counter=Set()*10;
 120:	0e 94 40 00 	call	0x80	; 0x80 <Set>
 124:	88 0f       	add	r24, r24
 126:	c8 2f       	mov	r28, r24
 128:	cc 0f       	add	r28, r28
 12a:	cc 0f       	add	r28, r28
 12c:	c8 0f       	add	r28, r24
		
		
		if(PINB&(1<<PINB1)){					//Taster A4 gedrückt (High Pegel)
			PINB1_curr = 1;
		} else {
			PINB1_curr = 0;
 12e:	fd 2c       	mov	r15, r13
			if (PINB1_prev!=PINB1_curr){		//falls Taster nicht mehr gedrückt und vorheriger input = gedrückt
				counter=Set()*10;
				stop = false;
 130:	dd 2d       	mov	r29, r13
 132:	01 c0       	rjmp	.+2      	; 0x136 <main+0x92>
		}
		
		
		
		if(PINB&(1<<PINB1)){					//Taster A4 gedrückt (High Pegel)
			PINB1_curr = 1;
 134:	f1 2e       	mov	r15, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x98>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xa2>
 146:	00 00       	nop
		
		
		_delay_ms(100);
		PINB1_prev = PINB1_curr;
		PINB0_prev = PINB0_curr;
	}
 148:	c0 cf       	rjmp	.-128    	; 0xca <main+0x26>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
