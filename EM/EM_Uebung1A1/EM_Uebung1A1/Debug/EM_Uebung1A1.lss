
EM_Uebung1A1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  000001dc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001b8  008001b8  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000295  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000162  00000000  00000000  00000615  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000170  00000000  00000000  00000777  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000003c  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018d  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bd  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	67 00       	.word	0x0067	; ????
  6a:	6e 00       	.word	0x006e	; ????
  6c:	75 00       	.word	0x0075	; ????
  6e:	7c 00       	.word	0x007c	; ????
  70:	83 00       	.word	0x0083	; ????
  72:	8a 00       	.word	0x008a	; ????
  74:	91 00       	.word	0x0091	; ????
  76:	98 00       	.word	0x0098	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ec ed       	ldi	r30, 0xDC	; 220
  8c:	f1 e0       	ldi	r31, 0x01	; 1
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a8 3b       	cpi	r26, 0xB8	; 184
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a8 eb       	ldi	r26, 0xB8	; 184
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	ae 3b       	cpi	r26, 0xBE	; 190
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  ae:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <actualize>:
#define F_CPU 16000000UL

#include <avr/io.h>
#include <util/delay.h>

 uint8_t actualize(uint8_t counter, uint8_t actualizer){
  b6:	cf 93       	push	r28
  b8:	c6 2f       	mov	r28, r22
	 
	 switch (counter) {
  ba:	48 2f       	mov	r20, r24
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	48 30       	cpi	r20, 0x08	; 8
  c0:	51 05       	cpc	r21, r1
  c2:	d8 f5       	brcc	.+118    	; 0x13a <actualize+0x84>
  c4:	fa 01       	movw	r30, r20
  c6:	ec 5c       	subi	r30, 0xCC	; 204
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	0c 94 b9 00 	jmp	0x172	; 0x172 <__tablejump2__>
		 
		 case 0:
		 printf("Fall 0: Counter ist 0.\n");
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 bf 00 	call	0x17e	; 0x17e <puts>
		 actualizer^= (1<<PORTD1);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	c8 27       	eor	r28, r24
		 break;
  da:	2f c0       	rjmp	.+94     	; 0x13a <actualize+0x84>
		 
		 case 1:
		 printf("Fall 1: Counter ist 1.\n");
  dc:	87 e1       	ldi	r24, 0x17	; 23
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 bf 00 	call	0x17e	; 0x17e <puts>
		 actualizer ^= (1<<PORTD1);
		 actualizer ^= (1<<PORTD2);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	c8 27       	eor	r28, r24
		 break;
  e8:	28 c0       	rjmp	.+80     	; 0x13a <actualize+0x84>
		 
		 case 2:
		 printf("Fall 2: Counter ist 2.\n");
  ea:	8e e2       	ldi	r24, 0x2E	; 46
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 bf 00 	call	0x17e	; 0x17e <puts>
		 actualizer ^= (1<<PORTD1);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	c8 27       	eor	r28, r24
		 break;
  f6:	21 c0       	rjmp	.+66     	; 0x13a <actualize+0x84>
		 
		 case 3:
		 printf("Fall 3: Counter ist 3.\n");
  f8:	85 e4       	ldi	r24, 0x45	; 69
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 bf 00 	call	0x17e	; 0x17e <puts>
		 actualizer ^= (1<<PORTD1);
		 actualizer ^= (1<<PORTD2);
		 actualizer ^= (1<<PORTD3);
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	c8 27       	eor	r28, r24
		 break;
 104:	1a c0       	rjmp	.+52     	; 0x13a <actualize+0x84>
		 
		 case 4:
		 printf("Fall 4: Counter ist 4.\n");
 106:	8c e5       	ldi	r24, 0x5C	; 92
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 bf 00 	call	0x17e	; 0x17e <puts>
		 actualizer ^= (1<<PORTD1);
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	c8 27       	eor	r28, r24
		 break;
 112:	13 c0       	rjmp	.+38     	; 0x13a <actualize+0x84>
		 
		 case 5:
		 printf("Fall 5: Counter ist 5.\n");
 114:	83 e7       	ldi	r24, 0x73	; 115
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 bf 00 	call	0x17e	; 0x17e <puts>
		 actualizer ^= (1<<PORTD1);
		 actualizer ^= (1<<PORTD2);
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	c8 27       	eor	r28, r24
		 break;
 120:	0c c0       	rjmp	.+24     	; 0x13a <actualize+0x84>
		 
		 case 6:
		 printf("Fall 6: Counter ist 6.\n");
 122:	8a e8       	ldi	r24, 0x8A	; 138
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 bf 00 	call	0x17e	; 0x17e <puts>
		 actualizer ^= (1<<PORTD1);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	c8 27       	eor	r28, r24
		 break;
 12e:	05 c0       	rjmp	.+10     	; 0x13a <actualize+0x84>
		 
		 case 7:
		 printf("Fall 7: Counter ist 7.\n");
 130:	81 ea       	ldi	r24, 0xA1	; 161
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 bf 00 	call	0x17e	; 0x17e <puts>
		 actualizer = ~((1<<PORTD1)|(1<<PORTD2)|(1<<PORTD3));
 138:	c1 ef       	ldi	r28, 0xF1	; 241
		 default:
		 //printf("Ungültiger Wert! Der Counter muss zwischen 0 und 7 liegen.\n");
		 break;
	 }
	 return actualizer;
}
 13a:	8c 2f       	mov	r24, r28
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <main>:

 
int main(void)
{
	DDRD|=(1<<PORTD1)|(1<<PORTD3)|(1<<PORTD2);// setzt DDRD an der stelle dddx auf output
 140:	8a b1       	in	r24, 0x0a	; 10
 142:	8e 60       	ori	r24, 0x0E	; 14
 144:	8a b9       	out	0x0a, r24	; 10
	
	uint8_t counter = 7;
 146:	c7 e0       	ldi	r28, 0x07	; 7
    {
		PORTD=actualize(counter, PORTD);
		_delay_ms(1000);
		
		if(counter == 0){
			counter = 7;
 148:	d7 e0       	ldi	r29, 0x07	; 7
 14a:	01 c0       	rjmp	.+2      	; 0x14e <main+0xe>
 14c:	cd 2f       	mov	r28, r29
	uint8_t counter = 7;
	
	
    while(1)
    {
		PORTD=actualize(counter, PORTD);
 14e:	6b b1       	in	r22, 0x0b	; 11
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 5b 00 	call	0xb6	; 0xb6 <actualize>
 156:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	83 ed       	ldi	r24, 0xD3	; 211
 15c:	90 e3       	ldi	r25, 0x30	; 48
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x1e>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x28>
 168:	00 00       	nop
		_delay_ms(1000);
		
		if(counter == 0){
 16a:	cc 23       	and	r28, r28
 16c:	79 f3       	breq	.-34     	; 0x14c <main+0xc>
			counter = 7;
		}
		else{
		counter--;
 16e:	c1 50       	subi	r28, 0x01	; 1
 170:	ee cf       	rjmp	.-36     	; 0x14e <main+0xe>

00000172 <__tablejump2__>:
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31

00000176 <__tablejump__>:
 176:	05 90       	lpm	r0, Z+
 178:	f4 91       	lpm	r31, Z
 17a:	e0 2d       	mov	r30, r0
 17c:	09 94       	ijmp

0000017e <puts>:
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	e0 91 ba 01 	lds	r30, 0x01BA
 18a:	f0 91 bb 01 	lds	r31, 0x01BB
 18e:	23 81       	ldd	r18, Z+3	; 0x03
 190:	21 ff       	sbrs	r18, 1
 192:	1b c0       	rjmp	.+54     	; 0x1ca <puts+0x4c>
 194:	ec 01       	movw	r28, r24
 196:	00 e0       	ldi	r16, 0x00	; 0
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	89 91       	ld	r24, Y+
 19c:	60 91 ba 01 	lds	r22, 0x01BA
 1a0:	70 91 bb 01 	lds	r23, 0x01BB
 1a4:	db 01       	movw	r26, r22
 1a6:	18 96       	adiw	r26, 0x08	; 8
 1a8:	ed 91       	ld	r30, X+
 1aa:	fc 91       	ld	r31, X
 1ac:	19 97       	sbiw	r26, 0x09	; 9
 1ae:	88 23       	and	r24, r24
 1b0:	31 f0       	breq	.+12     	; 0x1be <puts+0x40>
 1b2:	09 95       	icall
 1b4:	89 2b       	or	r24, r25
 1b6:	89 f3       	breq	.-30     	; 0x19a <puts+0x1c>
 1b8:	0f ef       	ldi	r16, 0xFF	; 255
 1ba:	1f ef       	ldi	r17, 0xFF	; 255
 1bc:	ee cf       	rjmp	.-36     	; 0x19a <puts+0x1c>
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	09 95       	icall
 1c2:	89 2b       	or	r24, r25
 1c4:	11 f4       	brne	.+4      	; 0x1ca <puts+0x4c>
 1c6:	c8 01       	movw	r24, r16
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <puts+0x50>
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
